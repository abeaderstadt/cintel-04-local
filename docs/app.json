[{"name": "app.py", "content": "import plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_plotly, render_widget\nfrom palmerpenguins import load_penguins\n\n\npenguins_df = load_penguins()\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.h2(\"Sidebar\"),\n            ui.input_selectize(\n                \"selected_attribute\",\n                \"Select a numeric attribute:\",\n                [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n            ),\n            ui.input_numeric(\n                \"plotly_bin_count\",\n                \"Plotly Histogram Bins:\",\n                value=10,\n            ),\n            ui.input_slider(\n                \"seaborn_bin_count\",\n                \"Seaborn Histogram Bins:\",\n                min=5,\n                max=50,\n                value=20,\n            ),\n            ui.input_checkbox_group(\n                \"selected_species_list\",\n                \"Filter by species:\",\n                [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                inline=True,\n            ),\n            ui.input_checkbox_group(\n                \"selected_islands\",\n                \"Filter by island:\",\n                 choices=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n                 selected=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n                 inline=True,\n            ),\n            ui.hr(),\n            ui.a(\n                \"GitHub Repo\",\n                href=\"https://github.com/abeaderstadt/cintel-02-data\",\n                target=\"_blank\",\n            ),\n            open=\"open\"\n        ),\n\n        ui.layout_columns(\n            ui.output_data_frame(\"data_table\"),\n            ui.output_data_frame(\"data_grid\"),\n        ),\n\n        ui.layout_columns(\n            output_widget(\"plotly_histogram\"),\n            ui.output_plot(\"seaborn_histogram\"),\n        ),\n\n        ui.card(\n            ui.card_header(\"Plotly Scatterplot: Species\"),\n            output_widget(\"plotly_scatterplot\"),\n            full_screen=True,\n        ),\n    )\n)\n\n# Define Server\ndef server(input, output, session):\n    # Add a reactive calculation to filter the data by selected species and selected island\n    @reactive.calc\n    def filtered_data():\n        selected_species = input.selected_species_list() or []\n        selected_islands = input.selected_islands() or []\n        df = penguins_df.copy()\n        if not selected_species:\n            return df.iloc[0:0]\n        df = df[df[\"species\"].isin(selected_species)]\n        if not selected_islands:\n            return df.iloc[0:0]\n        df = df[df[\"island\"].isin(selected_islands)]\n        # Drop rows with NaN \n        df = df.dropna(subset=[\"species\", \"island\", \"bill_length_mm\", \"body_mass_g\"])\n        return df\n\n    @render.data_frame\n    def data_table():\n        return filtered_data()\n\n    @render.data_frame\n    def data_grid():\n        return filtered_data()\n\n    @render_plotly\n    def plotly_histogram():\n        col = input.selected_attribute()\n        bins = input.plotly_bin_count() or 10\n        filtered = filtered_data()\n        fig = px.histogram(\n            filtered,\n            x=col,\n            nbins=bins,\n            color=\"species\",\n            title=f\"Plotly Histogram of {col}\"\n        )\n        return fig\n\n    @render.plot\n    def seaborn_histogram():\n        col = input.selected_attribute()\n        bins = input.seaborn_bin_count() or 20\n        filtered = filtered_data()\n        fig, ax = plt.subplots()\n        sns.histplot(\n            data=filtered,\n            x=col,\n            bins=bins,\n            kde=True,\n            hue=\"species\",\n            ax=ax\n        )\n        ax.set_title(f\"Seaborn Histogram of {col}\")\n        return fig\n\n    @render_plotly\n    def plotly_scatterplot():\n        filtered = filtered_data()\n        fig = px.scatter(\n            filtered,\n            x=\"bill_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            hover_data=[\"island\"],\n            title=\"Plotly Scatterplot: Bill Length vs Body Mass\",\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\",\n            },\n        )\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}]